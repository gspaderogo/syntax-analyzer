Token: EOS		Lexeme: $


---------- END OF STATEMENT ----------

Token: EOS		Lexeme: $


---------- END OF STATEMENT ----------

Token: EOS		Lexeme: $


---------- END OF STATEMENT ----------

Token: EOS		Lexeme: $


---------- END OF STATEMENT ----------

<Statement>	->	<Assignment>
<Assignment>	->	<id> = <Expression>;
Token: id		Lexeme: a

Token: OPERATOR		Lexeme: =

<Expression>	->	<Term> <ExpressionPrime>
<Term>		->	<Factor> <TermPrime>
<Factor>	->	id
Token: id		Lexeme: e

<Expression>	->	+ <Term> <ExpressionPrime>
Token: OPERATOR		Lexeme: +

<Term>		->	<Factor> <TermPrime>
<Factor>	->	id
Token: id		Lexeme: f

Token: SEP		Lexeme: ;

Token: EOS		Lexeme: $


---------- END OF STATEMENT ----------

<Statement>	->	<Assignment>
<Assignment>	->	<id> = <Expression>;
Token: id		Lexeme: b

Token: OPERATOR		Lexeme: =

<Expression>	->	<Term> <ExpressionPrime>
<Term>		->	<Factor> <TermPrime>
<Factor>	->	id
Token: id		Lexeme: d

<Expression>	->	- <Term> <ExpressionPrime>
Token: OPERATOR		Lexeme: -

<Term>		->	<Factor> <TermPrime>
<Factor>	->	id
Token: id		Lexeme: e

Token: SEP		Lexeme: ;

Token: EOS		Lexeme: $


---------- END OF STATEMENT ----------

<Statement>	->	<Select>
<Select>	->	select( <Expression> )
Token: select		Lexeme: while

Token: SEP		Lexeme: (

<Expression>	->	<Term> <ExpressionPrime>
<Term>		->	<Factor> <TermPrime>
<Factor>	->	id
Token: id		Lexeme: a

Token: SEP		Lexeme: )

Token: EOS		Lexeme: $


---------- END OF STATEMENT ----------

Token: EOS		Lexeme: $


---------- END OF STATEMENT ----------

